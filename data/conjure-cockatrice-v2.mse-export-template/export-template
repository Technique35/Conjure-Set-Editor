mse version: 2.5.0
short name: Cockatrice
full name: Exporter v2.1
position hint: 100
icon: icon.png
version: 2024-09-23
installer group: conjure/Export/cockatrice

depends on:
	package: conjure.mse-game
	version: 2009-07-23

game: conjure
create directory: true
file type: *.xml|*.xml|*.*|*.*

# By K'yoril, edited by Advent, Updated by Reuben Covington, Updated by Cajun, Updated by Zeu
# Updated to v4 xml by ebbit
# Based on code by Pichoro, Idle Muse, Innuendo and Seeonee
# Edited for Conjure by Tech35

option field:
	type: choice
	name: info
	choice: Updated 2024/10, guide: https://tinyurl.com/ctexportv2
option field:
	type: text
	name: cockatrice Set Type
	description: The "set type" your set will appear as in Cockatrice. "Custom" should be the default.
	default: Conjure
option field:
	type: text
	name: set Code
	description: Set Code used for Cockatrice. Should be based on the name of the Saga.
option field:
	type: choice
	name: export Images
	description: Export images along with the XML? Recommended for Cockatrice use. JPG is lower quality but lower file size.
	choice: no
	choice: JPG
	choice: PNG
	initial: no
option field:
	type: boolean
	name: emblems In Separate XML
	description: Emblems are exported to a Separate file called "[Set Code] Tokens.xml"
	initial: no
option field:
	type: boolean
	name: append Saga Name to Emblems
	description: Adds the saga name to emblem names to differentiate them from emblems with the same name from other sagas.
	initial: no
option field:
	type: text
	name: append String To Names
	description: Appended to the front of all card names and image names.

script:
	splitter_name := {false} ## experimental future thing for splitting dfc images
	#determine if the card is a type that is a "token" i.e. it should be batched with tokens instead of with other cards
	is_token := {contains(card.super_type_1, match:"Emblem")}
	is_double := {false}
	
	file_type := {if options.export_Images == "PNG" then "png" else "jpg"}

	#determine if the card is of a rarity that should be included
	included_rarity := {true}
	included_rarity2 := {true}

	#Strip bad punctuation from card names
	strip_card_name :=
		replace@(match: "’",replace:"'") + #replace bad apostrophe with good apostrophe
		replace@(match:":", replace:"")+ #remove colons
		replace@(match:";", replace:"")+ #remove semicolons
		replace@(match:"\n", replace:"")+ #remove linebreaks
		replace@(match:"\\.", replace:"")+ #remove periods
		remove_tags

	# escape special xml characters
	xml_escape := replace@(match:"&",replace:"&amp;") #escape ampersands
		+ replace@(match:"\"",replace:"\\&quot;") #escape double quote
		+ replace@(match:"\'",replace:"\\&apos;") #escape single quote
		+ replace@(match:"\<",replace:"\\&lt;") #escape less than sign
		#+ replace@(match:"\>",replace:"\\&gt;") #escape greater than sign, for some reason this upsets mse and they are technically not needed to escape
	
	setcode := options.set_Code
	aha := {
		if      (card.orb_1 == "health")            and (card.orb_2 == "hidden")            and (card.orb_3 == "hidden") then "_/"              + card.stat_1
		else if (card.orb_1 == "health and arcane") and (card.orb_2 == "hidden")            and (card.orb_3 == "hidden") then "_/"              + card.stat_1 + ":" + card.stat_1
		else if (card.orb_1 == "attack")            and (card.orb_2 == "health")            and (card.orb_3 == "hidden") then card.stat_1 + "/" + card.stat_2
		else if (card.orb_1 == "health")            and (card.orb_2 == "arcane")            and (card.orb_3 == "hidden") then "_/"              + card.stat_1 + "/" + card.stat_2
		else if (card.orb_1 == "attack and arcane") and (card.orb_2 == "health")            and (card.orb_3 == "hidden") then card.stat_1 + ":" + card.stat_1 + "/" + card.stat_2
		else if (card.orb_1 == "attack")            and (card.orb_2 == "health and arcane") and (card.orb_3 == "hidden") then card.stat_1 + "/" + card.stat_2 + ":" + card.stat_2
		else                                                                                                                  card.stat_1 + "/" + card.stat_2 + "/" + card.stat_3
		}

	#functions for the !exportname command
	exporter_name_filter := filter_text@(match:"!exporte?r?name [^\n\<]+")
	exporter_name_grabber := replace@(match:"!exporte?r?name ", replace:"")

	#determining what name should be used for the card
	card_name := { if exporter_name_grabber(exporter_name_filter(card.notes)) != "" then exporter_name_grabber(exporter_name_filter(card.notes)) else remove_tags(card.name) }

	#surround mana symbols in curly brackets
	format_mana := replace@(match:"(CHAOS|[1-9][0-9]+(?:\\/.)?|.\\/.\\/.|.\\/.|[+-]?[^.,: ])", replace:{"\{"+_1+"}"}, in_context:"<sym(-auto)?><match></sym")

	#determining what rules text should be used for the card
	card_rules_text := { card.rule_text_1 }

	#helpers to find the correct count for this token relation, and generate the requisite XML
	token_count_regex := "<([0-9]+|x)>"
	filter_count := filter_text@(match: token_count_regex)
	generate_count_XML := replace@(match:token_count_regex, replace:{" count=\"" + _1 + "\""})
	add_related_count := {if filter_count(input) != "" then generate_count_XML(filter_count(input)) else ""}

	#helpers to find if a auto-attachment is desired for this token relation, and generate the requisite XML
	add_attachment := {if filter_text(match: "<attach>", input) != "" then " attach=\"attach\"" else ""}
	
	#helpers to find if persistent is desired for this token relation, and generate the requisite XML
	add_persistent := {if filter_text(match:"<(conjure|persistent)>", input) != "" then " persistent=\"persistent\"" else ""}

	#helper functions for converted_related later
	related_entry_regex := "(.+?[^[:space:]])(?:;|\n|$)"

	#convert the !related command field to <reverse-related> XML blocks
	convert_related :=
		replace@(match: "!related ?\n?", replace:"")+ #blank out the related command itself
		replace@(match: "\<",replace:"<") + #replace junk Start of Header characters with proper "less than sign"s
		replace@(match: "’",replace:"'") + #replace bad apostrophe with good apostrophe
		replace@(match: "<X>",replace:"<x>") + #replace accidentily capital X with lowercase X
		replace@(match:"!",replace: "") + #blank out the command ender

		#for every other card name, surround it with reverse-related tags and put in relevant attributes
		{for each entry in (break_text(match:related_entry_regex, input)) do ("\n	   \<reverse-related" + add_related_count(entry)  + add_attachment(entry) + add_persistent(entry) + ">" + xml_escape(strip_card_name(entry)) + "\</reverse-related>")}

	#remove accidentily created empty <reverse-related> XML blocks
	remove_empty := replace@(match:"		\<(reverse-)?related>\</(reverse-)?related>", replace:"")

	#convert the !token command field to <related> XML blocks
	convert_token :=
		replace@(match: "!tokens? ?\n?", replace:"")+ #blank out the related command itself
		replace@(match: "\<",replace:"<") + #replace junk Start of Header characters with proper "less than sign"s
		replace@(match: "’",replace:"'") + #replace bad apostrophe with good apostrophe
		replace@(match: "<X>",replace:"<x>") + #replace accidentily capital X with lowercase X
		replace@(match:"!",replace: "") + #blank out the command ender

		#for every other card name, surround it with reverse-related tags and put in relevant attributes
		{for each entry in (break_text(match:related_entry_regex, input)) do ("\n	   \<related" + add_related_count(entry)  + add_attachment(entry) + add_persistent(entry) + ">" + xml_escape(strip_card_name(entry)) + "\</related>")}


	filter_related := filter_text@(match:"!relate ?[^!]+!?")
	filter_token := filter_text@(match:"!tokens? ?[^!]+!?")

	#functions for the !tapped command
	contains_tapped := contains@(match:"!tapped")

	CIPT := {if contains_tapped(card.notes) then "\n	  "+"\<cipt>" + "1" + "\</cipt>" else ""}

	# maintype, used in cockatrice's card type sorting,
	# no longer automatically determined in v4 xml,
	# first use the same heuristic used in "oracle" else do the same thing v3 xml did
	# !maintype [type]! in the card notes overwrites this
	filter_maintype := filter_text@(match:"!maintype ?[^!]+!?")
	maintype :=
	{
		"\n		   "+"\<maintype>"
		+(
			if filter_maintype(card.notes) != "" then xml_escape(replace(match:"!$", replace:"", replace(match:"^!maintype ?", replace:"", filter_maintype(card.notes))))
			else if contains(card.super_type_1, match:"Character") then "Character"
			else if contains(card.super_type_1, match:"Essence") then "Essence"
			else if contains(card.super_type_1, match:"Spell") then "Spell"
			else if contains(card.super_type_1, match:"Action") then "Action"
			else if contains(card.super_type_1, match:"Object") then "Object"
			else xml_escape(replace(match:"^.* ", replace:"", replace(match:"(<sep-soft>)? —.*$", replace:"", card.super_type_1)))
		)
		+"\</maintype>"
	}

	card_color :=
	{
		if contains(card.super_type_1, match:"Essence") then "" else
		(
			 (if contains(card.mana_cost_1, match:"R") then "R" else "")
			+(if contains(card.mana_cost_1, match:"O") then "O" else "")
			+(if contains(card.mana_cost_1, match:"Y") then "Y" else "")
			+(if contains(card.mana_cost_1, match:"G") then "G" else "")
			+(if contains(card.mana_cost_1, match:"B") then "B" else "")
			+(if contains(card.mana_cost_1, match:"I") then "I" else "")
			+(if contains(card.mana_cost_1, match:"V") then "V" else "")
		)
	}

	#write a normal card's XML text
	write_normal := {
		"\n	   "+"\<card>"
		# Name
		+"\n	  "+"\<name>"+xml_escape(options.append_String_To_Names+strip_card_name(card_name()))+"\</name>"
		# Set
		+"\n	  "+"\<set rarity=\"common\">"+setcode+"\</set>"
		+"\n	  "+"\<prop>"
		# Color
		+"\n		"+"\<colors>"
		+ card_color()
			+"\</colors>"
		# Mana Cost
		+"\n		"+"\<manacost>"+card.mana_cost_1+"\</manacost>"
		# Converted Mana Cost
		+"\n		"+"\<cmc>"+card.cmc_1+"\</cmc>"
		# Type
		+"\n		"+"\<type>"+xml_escape(card.super_type_1)+" - "+xml_escape(card.sub_type_1)+"\</type>"
		+maintype()
		# P/T
		+(if contains(card.super_type_1, match:"Character") then "\n		   "+"\<pt>"+xml_escape(aha())+"\</pt>")
		+"\n	  "+"\</prop>"
		# Tablerow
		+"\n	  "+"\<tablerow>"
			+( if contains(card.super_type_1, match:"Ongoing") then "1"
			 else if contains(card.super_type_1, match:"Spell") or contains(card.super_type_1, match:"Action") then "3"
			 else if contains(card.super_type_1, match:"Character") then "2"
			 else if contains(card.super_type_1, match:"Essence") then "0"
			 else "1")
			+"\</tablerow>"
		#CIPT
		+ CIPT()
		# Rules Text
		+"\n	  "+"\<text>"+xml_escape(card_rules_text())+"\</text>"
		+ (if filter_token(card.notes) != "" then remove_empty(convert_token(filter_token(card.notes))))
		+"\n	"+"\</card>"
	}
	write_token := {
		"\n	   "+"\<card>"
		# Name
		+"\n	  "+"\<prop>"
		# Color
		+"\n		"+"\<colors>"
		+ card_color()
			+"\</colors>"
		# Type
		+"\n		"+"\<type>"+xml_escape(replace(card.super_type_1, match:"—", replace:"-"))+"\</type>"
		+maintype()
		# P/T
		+(if contains(card.super_type_1, match:"Character") then "\n		   "+"\<pt>"+xml_escape(aha())+"\</pt>")
		+"\n	  "+"\</prop>"
		# Tablerow
		+"\n	  "+"\<tablerow>"
			+( if contains(card.super_type_1, match:"Ongoing") then "1"
			 else if contains(card.super_type_1, match:"Spell") or contains(card.super_type_1, match:"Action") then "3"
			 else if contains(card.super_type_1, match:"Character") then "2"
			 else if contains(card.super_type_1, match:"Essence") then "0"
			 else "1")
			+"\</tablerow>"
		#CIPT
		+ CIPT()
		# Rules Text
		+"\n	  "+"\<text>"+xml_escape(card_rules_text())+"\</text>"
		# Token
		+ "\n	   "+"\<token>1\</token>"
		# Reverse Related
		#if there is a !related block in the cards notes, set up the reverse-related XML elements
		+ (if filter_related(card.notes) != "" then remove_empty(convert_related(filter_related(card.notes))))
		+"\n	"+"\</card>"
	}

	write_card := { if is_token() then ""
		else write_normal()
	}

	#if the currently exported card is a token, write it as a token
	write_token_if_token := { if is_token() then write_token() else ""}

	#render image file
	write_image :=
	{
		sts := card.stylesheet
		if sts == nil then sts := set.stylesheet
		if length(sts.card_regions) > 0 then write_multi_image()
		else write_single_image()
	}
	format_file_name := {
		options.append_String_To_Names
		+ input
		+ ".full." + file_type()
	}
	write_single_image := {
		write_image_file(
			card,
			directory: setcode,
			file: format_file_name(strip_card_name(card_name())),
			width: 1644
			height: 2244
		)
	}
	write_multi_image := {
		crop_data := crop_multi_image(card:card)
		for i from 0 to length(crop_data.keys)-1 do (
			region_name := crop_data.keys[i][0]
			region_image := crop_data.values[i][0]
			face_name := if region_name == "front" or region_name == "minifront"
							then strip_card_name(card_name())
						else if region_name == "back" or region_name == "meldpair"
							then strip_card_name(card.name_2)
						else if region_name == "meld" or region_name == "meldback" or region_name == "thirdcard"
							then strip_card_name(card.name_3)
						else strip_card_name(card_name()) + "_" + region_name
			write_image_file(
				region_image,
				directory: setcode,
				file: format_file_name(face_name)
				width: 1644
				height: 2244
			)
		)
	}

	#if images are set to be rendered, render all images of rarities that have been selected
	write_images := if options.export_Images != "no" then for each card in filter_list(cards,filter:{included_rarity(card:input)}) do write_image() else ""

	write_cards := to_text(for each card in cards do write_card())
	write_all_tokens := to_text(for each card in cards do write_token_if_token())

	#Main export script

	#tokens in Separate XML
	if options.emblems_In_Separate_XML then write_text_file(file:setcode + " Emblems" + ".xml", to_string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<cockatrice_carddatabase version=\"4\">\n  <cards>\n"+write_all_tokens+"\n\n  </cards>\n</cockatrice_carddatabase>"))

	#other cards
	to_string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<cockatrice_carddatabase version=\"4\">\n  <sets>\n	  <set>\n	   <name>"+setcode+"</name>\n	   <longname>"+xml_escape(set.title)+"</longname>\n		 <settype>"+xml_escape(options.cockatrice_Set_Type)+"</settype>\n	 </set>\n  </sets>\n  <cards>\n"+write_cards+if not(options.emblems_In_Separate_XML) then ("\n\n	<!-->Tokens</-->\n"+write_all_tokens)+"\n\n	 </cards>\n</cockatrice_carddatabase>")

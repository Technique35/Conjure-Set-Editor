mse version: 2.5.6
short name: Spreadsheet
full name: Tab Separated values
position hint: 000
icon: icon.png
version: 2024-08-31

depends on:
	package: conjure.mse-game
	version: 2024-08-31
depends on:
	package: conjure-shared.mse-include
	version: 2024-08-31

game: conjure
create directory: true
file type: *.txt|*.txt|*.*|*.*

option field:
	type: choice
	name: export images
	description: Should card images be exported as well?
	choice: Yes, With Bleed Margin
	choice: Yes, With Transparent Corners
	choice: Yes, Without Margin Or Corners
	choice: No
	initial: No

option field:
	type: choice
	name: image resolution
	description: What size to export to.
	choice: 3000x4200     (Bigger File Size, Better Quality)
	choice: 1500x2100
	choice: 750x1050
	choice: 375x525         (Smaller File Size, Worse Quality)
	initial: 1500x2100

option field:
	type: choice
	name: image extension
	description: What compression method to use.
	choice: PNG     (Bigger File Size, Better Quality)
	choice: JPG       (Smaller File Size, Worse Quality)
	initial: PNG     (Bigger File Size, Better Quality)

option field:
	type: multiple choice
	name: spreadsheet values
	description: What values to export.
	choice: Name
	choice: Mana Cost
	choice: CMC
	choice: Color
	choice: Type
	choice: Super Type
	choice: Sub Type
	choice: Stats
	choice: Rule Text
	choice: Lore Text
	choice: Artist
	choice: Designer
	choice: Collector Number
	choice: Revision
	choice: Saga
	choice: Border Shape
	choice: Lore Bar Shape
	choice: Notes
	initial: Name, Mana Cost, Type, Stats, Rule Text, Lore Text, Revision, Saga, Notes

option style:
	spreadsheet values:
		render style:	checklist
		direction:		vertical

script:
	format_symbols :=
		replace@(match: "<sym(-auto)?>", replace: "\{") +
		replace@(match: "</sym(-auto)?>", replace: "}")
	escape_characters :=
		replace@(match:"<atom><soft-line>\n</soft-line></atom>", replace:"") +
		replace@(match:"\n", replace:"\\\\n ") +
		replace@(match:"\t", replace:"\\\\t ")
	replace_commas := replace@(match: ", ", replace: "	")
	split_commas := split_text@(match: ", ")
	replace_stats := replace@(match: "Stats", replace: "Attack	Health	Arcane")
	
	exporter_name_filter := filter_text@(match:"!exporte?r?name [^\n\<]+")
	exporter_name_grabber := replace@(match:"!exporte?r?name ", replace:"")
	
	extension_value := to_lower(replace(options.image_extension, match: " .*", replace: ""))
	zoom_value := round(to_int(replace(options.image_resolution, match: "x.*", replace: ""))/15)
	trim_value := if options.export_images == "Yes, With Transparent Corners" or options.export_images == "Yes, Without Margin Or Corners" then bleed else 0
	corner_value := options.export_images == "Yes, With Transparent Corners"
	corner_mask := "/conjure-shared.mse-include/corner mask.png"
	
	card_offset := trim_value*zoom_value/100
	card_width := (stylesheet.card_width-2*trim_value)*zoom_value/100
	card_height := (stylesheet.card_height-2*trim_value)*zoom_value/100
	
	name_list := []
	
	value_map :=
	[
		"Name":				{ export_name := exporter_name_grabber(exporter_name_filter(card.notes)); if export_name != "" then export_name else card.name }
		"Mana Cost":		{ card.mana_cost_1 }
		"CMC":				{ card.cmc_1 }
		"Color":			{ card.frame_1 }
		"Type":				{ to_text(card.type_1) }
		"Super Type":		{ to_text(card.super_type_1) }
		"Sub Type":			{ to_text(card.sub_type_1) }
		"Stats":			{ card.attack_1 + "	" + card.health_1 + "	" + card.arcane_1 }
		"Rule Text":		{ to_text(escape_characters(format_symbols(card.rule_text_1))) }
		"Lore Text":		{ to_text(escape_characters(format_symbols(card.lore_text_1))) }
		"Artist":			{ card.artist_1 }
		"Designer":			{ card.designer_1 }
		"Collector Number":	{ card.collector_number_1 }
		"Revision":			{ card.revision_1 }
		"Saga":				{ card.saga_1 }
		"Border Shape":		{ card.outer_border_1 }
		"Lore Bar Shape":	{ card.lore_bar_1 }
		"Notes":			{ escape_characters(card.notes) }
	]
	
	write_header := { replace_commas(replace_stats(options.spreadsheet_values)) + "\n" }
	write_card :=
	{
		split := split_commas(options.spreadsheet_values)
		count := length(split) - 1
		card_values := for x from 0 to count do
		(
			"	" + value_map[split[x]]()
		)
		substring(card_values, begin:1) + "\n"
	}
	write_image :=
	{
		export_image := crop(
			to_card_image(card, zoom: zoom_value, angle: 0),
			offset_x: card_offset,
			offset_y: card_offset,
			width: card_width,
			height: card_height
		)
		if corner_value then export_image := set_mask(image: export_image, mask: corner_mask)
		export_name := exporter_name_grabber(exporter_name_filter(card.notes))
		if export_name == "" then export_name := card.name
		count := list_occurence_count(export_name, list: name_list)
		suffix := if count == 0 then "" else "_" + pad(count+1, to: 2)
		write_image_file(export_image, file: export_name + suffix + "." + extension_value)
		[export_name]
	}
	write_set := for each card in cards do write_card()
	
	if options.export_images != "No" then (for each card in cards do name_list := name_list + write_image(card: card); "")
	
	to_string(to_text(write_header() + write_set))
